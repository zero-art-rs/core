

# This file was *autogenerated* from the file src/mvp/ag_enc_id.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1461501624496790265145448589920785493717258890819 = Integer(1461501624496790265145448589920785493717258890819); _sage_const_1461501624496790265145447380994971188499300027613 = Integer(1461501624496790265145447380994971188499300027613); _sage_const_1208925814305217958863207 = Integer(1208925814305217958863207); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_123456787654321 = Integer(123456787654321); _sage_const_10 = Integer(10); _sage_const_10000 = Integer(10000)# there must be Setup, KeyGen, Extract, Encrypt, Decrypt functions of AgEncID protocol
import time

import numpy as np

class PublicParamethers:
    def __init__(self, p, ord, t, E, G, alpha, param, n):
        self.p = p
        self.ord = ord
        self.t = t
        self.E = E
        self.G = G
        self.ord = E.order()
        self.alpha = alpha
        self.param = param
        self.n = n
    
def Setup(l: int, n: int) -> PublicParamethers:
    p = _sage_const_1461501624496790265145448589920785493717258890819 
    ord = _sage_const_1461501624496790265145447380994971188499300027613 
    t = _sage_const_1208925814305217958863207 

    E = EllipticCurve(GF(p), [_sage_const_0 ,_sage_const_3 ])
    G = E([_sage_const_1 , _sage_const_2 ])

    alpha = randint(_sage_const_2 ,p)

    Temp = G

    param = np.empty(
        (_sage_const_2  * n),
        dtype=sage.schemes.elliptic_curves.ell_point.EllipticCurvePoint_finite_field
    )
    for i in range(_sage_const_0 , n):
        Temp = alpha * Temp
        param[i] = Temp

    Temp = alpha * Temp
    for i in range(n+_sage_const_1 , _sage_const_2 *n):
        Temp = alpha * Temp
        param[i] = Temp

    pp = PublicParamethers(
        p=p,
        ord=ord,
        t=t,
        E=E,
        G=G,
        alpha=alpha,
        param=param,
        n=n
    )
    return pp

def KeyGen(pp: PublicParamethers):
    gamma = randint(_sage_const_2 , pp.p)
    msk = gamma
    v = gamma * pp.G

    keyset = np.empty(
        (pp.n),
        dtype=sage.schemes.elliptic_curves.ell_point.EllipticCurvePoint_finite_field
    )
    for i in range(_sage_const_0 , pp.n):
        keyset[i] = gamma * pp.param[i]
    
    return msk, v, keyset

def Extract(pp: PublicParamethers, S: list[int]):
    K_S = _sage_const_0 
    for j in S:
        K_S += pp.param[pp.n - j]

    return K_S

def Encrypt(pp: PublicParamethers, S: list[int], v, m):
    t = randint(_sage_const_2 , pp.p)

    K_S = Extract(pp, S)

    c1 = t * pp.G
    c2 = t * (v + K_S)
    c3 = m * pp.param[pp.n - _sage_const_1 ].weil_pairing(t * pp.param[_sage_const_0 ], pp.ord)

    return c1, c2, c3

def Decrypt(pp, S: list[int], i: int, d_i, C):
    c1, c2, c3 = C

    b_iS = _sage_const_0 
    for j in S:
        if j != i:
            b_iS += pp.param[pp.n - j + i]

    top = (d_i + b_iS).weil_pairing(c1, pp.ord)
    down = pp.param[i].weil_pairing(c2, pp.ord)

    return c3 * (top / down)

def time_evalation(n: int):
    time_start = time.time()
    pp = Setup(l=None, n=n)
    time_finish = time.time()
    print(f"Setup time: {time_finish - time_start:0.3f} s.")

    time_start = time.time()
    msk, v, keyset = KeyGen(pp)
    time_finish = time.time()
    print(f"KeyGen time: {time_finish - time_start:0.3f} s.")

    S = [i for i in range(_sage_const_2 , pp.n)]
    m = _sage_const_123456787654321 
    time_start = time.time()
    C = Encrypt(pp, S, v, m)
    time_finish = time.time()
    print(f"Encrypt time: {time_finish - time_start:0.3f} s.")

    i = _sage_const_10 
    time_start = time.time()
    m_ = Decrypt(pp, S, i, keyset[i], C)
    time_finish = time.time()
    print(f"Decrypt time: {time_finish - time_start:0.3f} s.")

    print("m: ", m)
    print("m':", m_)

def main(n: int):
    pp = Setup(l=None, n=n)

    msk, v, keyset = KeyGen(pp)

    S = [i for i in range(_sage_const_2 , pp.n)]
    m = _sage_const_123456787654321 
    C = Encrypt(pp, S, v, m)

    i = _sage_const_10 
    m_ = Decrypt(pp, S, i, keyset[i], C)

    print("m: ", m)
    print("m':", m_)

if __name__ == "__main__":
    # main(100)
    time_evalation(_sage_const_10000 )

